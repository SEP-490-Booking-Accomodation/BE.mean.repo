const Report = require("../models/reportModel");
const asyncHandler = require("express-async-handler");
const validateMongoDbId = require("../utils/validateMongodbId");
const softDelete = require("../utils/softDelete");
const Notification = require("../models/notificationModel");
const { sendEmail } = require("../controller/emailCrtl");
const moment = require("moment-timezone");

const createReport = asyncHandler(async (req, res) => {
  try {
    const newReport = await Report.create(req.body);
    res.json(newReport);
  } catch (error) {
    throw new Error(error);
  }
});

const updateReport = asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongoDbId(id);
  try {
    const updatedReport = await Report.findByIdAndUpdate(id, req.body, {
      new: true,
    })
      .populate({
        path: "replyBy",
        model: "Admin",
        populate: {
          path: "userId",
          select: "fullName email", // l·∫•y fullName cho notification
        },
      })
      .populate({
        path: "bookingId",
        populate: {
          path: "customerId",
          populate: {
            path: "userId",
            select: "email fullName",
          },
        },
      });

    if (!updatedReport) {
      return res.status(404).json({ message: "Report not found" });
    }

    const user = updatedReport?.bookingId?.customerId?.userId;
    const email = user?.email;
    const admin = updatedReport?.replyBy?.userId;

    // G·ª≠i email
    if (email) {
      const emailData = {
        to: email,
        subject: `B√°o c√°o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (#${updatedReport._id})`,
        html: `
          <p>B√°o c√°o <strong>#${updatedReport._id}</strong> cho booking <strong>#${updatedReport.bookingId?._id}</strong> ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
          <p>Vui l√≤ng truy c·∫≠p <strong>·ª©ng d·ª•ng Mean</strong> ƒë·ªÉ xem chi ti·∫øt.</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i b√°o c√°o cho ch√∫ng t√¥i. Tr∆∞·ªùng h·ª£p b·∫°n c·∫ßn th√™m h·ªó tr·ª£, vui l√≤ng ph·∫£n h·ªìi l·∫°i email n√†y ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n nhanh ch√≥ng h∆°n.</p>
        `,
      };

      await sendEmail(emailData);
      console.log(`‚úÖ Email sent to ${email} for report #${updatedReport._id}`);
    } else {
      console.log(`‚ö†Ô∏è No email found for report #${updatedReport._id}`);
    }

    // G·ª≠i notification
    if (user?._id) {
      const notificationContent = `
ƒê√¢y l√† k·∫øt qu·∫£ sau khi ch√∫ng t√¥i x·ª≠ l√Ω ƒë∆°n b√°o c√°o c·ªßa b·∫°n:

- reportId: ${updatedReport._id}
- bookingId: ${updatedReport.bookingId?._id}
- L√Ω do: ${updatedReport.reason}
- N·ªôi dung: ${updatedReport.content}
- Ph·∫£n h·ªìi: ${updatedReport.contentReply}
- ƒê∆∞·ª£c h·ªó tr·ª£ b·ªüi: ${admin?.fullName}

C·∫£m ∆°n b·∫°n ƒë√£ b√°o c√°o cho ch√∫ng t√¥i. Trong tr∆∞·ªùng h·ª£p c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng ph·∫£n h·ªìi l·∫°i th√¥ng qua email.
Xin c·∫£m ∆°n.
`.trim();

      await Notification.create({
        userId: user._id,
        bookingId: updatedReport.bookingId?._id,
        title: `H·ªá th·ªëng ƒë√£ x·ª≠ l√Ω ƒë∆°n b√°o c√°o c·ªßa b·∫°n #${updatedReport._id}`,
        content: notificationContent,
        type: 7, // REPORT
      });

      console.log(`üîî Notification sent for report #${updatedReport._id}`);
    } else {
      console.log(
        `‚ö†Ô∏è No user found to notify for report #${updatedReport._id}`
      );
    }

    res.json(updatedReport);
  } catch (error) {
    throw new Error(error);
  }
});

const deleteReport = asyncHandler(async (req, res) => {
  const { id } = req.params;
  try {
    const deletedReport = await softDelete(Report, id);

    if (!deletedReport) {
      return res.status(404).json({ message: "Report not found" });
    }

    res.json({ message: "Report deleted successfully", data: deletedReport });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

const getReport = asyncHandler(async (req, res) => {
  const { id } = req.params;
  validateMongoDbId(id);
  try {
    const get1Report = await Report.findOneAndUpdate(
      { _id: id, isDelete: false },
      { isReviewed: true },
      {
        new: true,
      }
    )
      .populate({
        path: "replyBy",
        model: "Admin",
        select: "-createdAt -updatedAt -isDelete",
        populate: {
          path: "userId",
          select:
            "-password -tokenId -createdAt -updatedAt -isDelete -roleId -isActive -isVerifiedPhone", // Lo·∫°i b·ªè tr∆∞·ªùng nh·∫°y c·∫£m
        },
      })
      .populate({
        path: "bookingId",
        populate: {
          path: "customerId",
          populate: {
            path: "userId",
            select: "email fullName",
          },
        },
      });

    if (!get1Report) {
      return res.status(404).json({ message: "Report not found" });
    }

    const user = get1Report?.bookingId?.customerId?.userId;
    console.log(get1Report?.bookingId?.customerId);
    const email = user?.email;

    const formattedDate = moment(get1Report.createdAt)
      .tz("Asia/Ho_Chi_Minh")
      .format("HH:mm:ss DD/MM/YYYY");
    const nowFormatted = moment()
      .tz("Asia/Ho_Chi_Minh")
      .format("DD/MM/YYYY HH:mm:ss");

    const contentText = `
      H·ªá th·ªëng ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆°n b√°o c√°o c·ªßa b·∫°n v√†o th·ªùi gian ${formattedDate}, th√¥ng tin b√°o c√°o c·ªßa b·∫°n bao g·ªìm:
      - M√£ ƒë∆°n ƒë·∫∑t ph√≤ng (bookingId): ${get1Report.bookingId?._id}
      - L√Ω do: ${get1Report.reason}
      - N·ªôi dung: ${get1Report.content}
      Ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng x·ª≠ l√Ω ƒë∆°n b√°o c√°o c·ªßa b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.
      C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.
    `;

    // G·ª≠i email n·∫øu c√≥ email
    if (email) {
      const emailData = {
        to: email,
        subject: `H·ªá th·ªëng ƒëang x·ª≠ l√Ω ƒë∆°n b√°o c√°o c·ªßa b·∫°n (#${get1Report._id})`,
        text: contentText,
        html: `
          <p>H·ªá th·ªëng ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆°n b√°o c√°o c·ªßa b·∫°n v√†o th·ªùi gian <b>${formattedDate}</b>, th√¥ng tin b√°o c√°o c·ªßa b·∫°n bao g·ªìm:</p>
          <ul>
            <li><b>M√£ ƒë∆°n ƒë·∫∑t ph√≤ng (bookingId):</b> ${get1Report.bookingId?._id}</li>
            <li><b>L√Ω do:</b> ${get1Report.reason}</li>
            <li><b>N·ªôi dung:</b> ${get1Report.content}</li>
          </ul>
          <p>Ch√∫ng t√¥i s·∫Ω c·ªë g·∫Øng x·ª≠ l√Ω ƒë∆°n b√°o c√°o c·ªßa b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>
          <br/>
          <p><i>ƒê·ªôi ng≈© team Mean</i></p>
        `,
      };

      await sendEmail(emailData);
      console.log(
        `‚úÖ Email sent to user ${user.fullName} (${email}) for report #${get1Report._id}`
      );
    } else {
      console.log(
        `‚ö†Ô∏è No email found for user related to report #${get1Report._id}`
      );
    }

    // G·ª≠i notification
    if (user?._id) {
      await Notification.create({
        userId: user._id,
        bookingId: get1Report.bookingId?._id,
        title: `H·ªá th·ªëng ƒëang x·ª≠ l√Ω ƒë∆°n b√°o c√°o c·ªßa b·∫°n (#${get1Report._id})`,
        content: `B√°o c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n v√†o l√∫c ${nowFormatted}. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t.`,
        type: 7, // REPORT
      });
      console.log(
        `üîî Notification created for user ${user.fullName} (ID: ${user._id})`
      );
    } else {
      console.log(`‚ö†Ô∏è No user found to notify for report #${get1Report._id}`);
    }

    res.json(get1Report);
  } catch (error) {
    console.error("‚ùå Error in getReport:", error);
    throw new Error(error);
  }
});

const getAllReport = asyncHandler(async (req, res) => {
  try {
    const getAllReport = await Report.find({ isDelete: false })
      .populate({
        path: "bookingId",
        model: "Booking",
        select: "-createdAt -updatedAt -isDelete",
        populate: {
          path: "customerId",
          select: "-createdAt -updatedAt -isDelete",
          populate: {
            path: "userId",
            select: "fullName", // Lo·∫°i b·ªè tr∆∞·ªùng nh·∫°y c·∫£m
          },
        },
      })
      .populate({
        path: "replyBy",
        model: "Owner",
        select: "-createdAt -updatedAt -isDelete",
        populate: {
          path: "userId",
          select:
            "-password -tokenId -createdAt -updatedAt -isDelete -roleId -isActive -isVerifiedPhone", // Lo·∫°i b·ªè tr∆∞·ªùng nh·∫°y c·∫£m
        },
      });
    res.json(getAllReport);
  } catch (error) {
    throw new Error(error);
  }
});

module.exports = {
  createReport,
  updateReport,
  deleteReport,
  getReport,
  getAllReport,
};
